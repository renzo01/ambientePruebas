@isTest
public class AnimalsCalloutsTest {
    @isTest static void testGetCallout(){
        // create the mock response based on static resource
        StaticResourceCalloutMock mock =  new StaticResourceCalloutMock();
        mock.setStaticResource('GetAnimalResource');
        mock.setStatusCode(200);
        mock.setHeader('Content-Type', 'application/json;charset=utf-8');
        Test.setMock(HttpCalloutMock.class, mock);
        HttpResponse result = AnimalsCallouts.makeGetCallout();
        System.assertNotEquals(null,result, 'The callout returned');
        System.assertEquals(200,result.getStatusCode(), 'The status code is not 200');
        System.assertEquals('application/json;charset=UTF-8',
          result.getHeader('Content-Type'),
          'The content type value is not expected.'); 
        //Verify the array contains 3 items
        Map<String, Object> results = (Map<String, Object>) JSON.deserializeUntyped(result.getBody());
        List<Object> animals = (List<Object>) results.get('animals');
        System.assertEquals(3, animals.size(),'The array should only contains 3 items.');
    }
  	
    @isTest static void testPostCallout(){
        //set mock with callout craeted before
        Test.setMock(HttpCalloutMock.class, new AnimalsHttpCalloutMock());
        HttpResponse response = AnimalsCallouts.makePostCallout();
        String contentType = response.getHeader('Content-type');
        System.assert(contentType == 'application/json');
        String actualValue = response.getBody();
        System.debug(response.getBody());
        String expectedValue = '{"animals": ["majestic badger", "fluffy bunny", "scary bear", "chicken", "mighty moose"]}';
        System.assertEquals(expectedValue, actualValue);
        System.assertEquals(200, response.getStatusCode());
    }
}